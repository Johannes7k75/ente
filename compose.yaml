networks:
  internal:

volumes:
  custom-logs:
  postgres-data:
  minio-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/IronWolf_4TB/minio-data

services:
  museum:
    build: 
      context: server
      args:
        GIT_COMMIT: production
    ports:
      - 8080:8080 # API
      - 2112:2112 # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "echo", "1"]
    environment:
      ENTE_DB_HOST: postgres
      ENTE_DB_PORT: 5432
      ENTE_DB_NAME: ente_db
      ENTE_DB_USER: pguser
      ENTE_DB_PASSWORD: pgpass
      ENTE_CREDENTIALS_FILE: /credentials.yaml
      # ENVIRONMENT: production
    volumes:
      - custom-logs:/var/logs
      - ./museum.yaml:/museum.yaml:ro
      - ./configuration/production.yaml:/credentials.yaml:ro
      - ./data:/data:ro
    networks:
      - internal

  # Resolve "localhost:3200" in the museum container to the minio container.
  socat:
    image: alpine/socat
    network_mode: service:museum
    depends_on:
      - museum
    command: "TCP-LISTEN:3200,fork,reuseaddr TCP:minio:3200"

  web: 
    build:
      context: web
    ports:
      - 8081:80
      - 8082:80
    depends_on:
      museum:
        condition: service_healthy
    
  postgres:
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: ente_db
    healthcheck: 
      test: ["CMD", "pg_isready", "-q", "-d", "ente_db", "-U", "pguser"]
      interval: 1s
      timeout: 5s
      retries: 20
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks: 
      - internal
  
  minio:
    image: minio/minio
    # Use different ports than the minio defaults to avoid conflicting
    # with the ports used by Prometheus.
    ports:
      - 3200:3200 # API
      - 3201:3201 # Console
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testtest
    command: server /data --address ":3200" --console-address ":3201"
    volumes:
      - minio-data:/data
    networks:
      - internal
      
  minio-provision:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./server/scripts/compose/minio-provision.sh:/provision.sh:ro
      - minio-data:/data
    networks:
      - internal
    entrypoint: sh /provision.sh